<?xml version="1.0"?>
<doc>
    <assembly>
        <name>itext.typography</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:iText.Typography.Bidi.BidiAlgorithm" -->
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.L">
            <summary>Left-to-right</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.LRE">
            <summary>Left-to-Right Embedding</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.LRO">
            <summary>Left-to-Right Override</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.R">
            <summary>Right-to-Left</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.AL">
            <summary>Right-to-Left Arabic</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.RLE">
            <summary>Right-to-Left Embedding</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.RLO">
            <summary>Right-to-Left Override</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.PDF">
            <summary>Pop Directional Format</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.EN">
            <summary>European Number</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.ES">
            <summary>European Number Separator</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.ET">
            <summary>European Number Terminator</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.AN">
            <summary>Arabic Number</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.CS">
            <summary>Common Number Separator</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.NSM">
            <summary>Non-Spacing Mark</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.BN">
            <summary>Boundary Neutral</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.B">
            <summary>Paragraph Separator</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.S">
            <summary>Segment Separator</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.WS">
            <summary>Whitespace</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.ON">
            <summary>Other Neutrals</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.LRI">
            <summary>Left-to-Right Isolate</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.RLI">
            <summary>Right-to-Left Isolate</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.FSI">
            <summary>First-Strong Isolate</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.PDI">
            <summary>Pop Directional Isolate</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.TYPE_MIN">
            <summary>Minimum bidi type value.</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.TYPE_MAX">
            <summary>Maximum bidi type value.</summary>
        </member>
        <member name="F:iText.Typography.Bidi.BidiAlgorithm.typenames">
            <summary>Shorthand names of bidi type values, for error reporting.</summary>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.#ctor(System.Byte[],System.Byte[],System.Int32[])">
            <summary>Initialize using several arrays, then run the algorithm</summary>
            <param name="types">
            Array of types ranging from TYPE_MIN to TYPE_MAX inclusive
            and representing the direction codes of the characters in the text.
            </param>
            <param name="pairTypes">
            Array of paired bracket types ranging from 0 (none) to 2 (closing)
            of the characters
            </param>
            <param name="pairValues">
            Array identifying which set of matching bracket characters
            as defined in BidiPBAReference (note, both opening and closing
            bracket get the same value if they are part of the same canonical "set"
            or pair)
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Typography.Bidi.BidiAlgorithm.#ctor(System.Byte[],System.Byte[],System.Int32[],System.Byte)" -->
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.RunAlgorithm">
            <summary>The algorithm.</summary>
            <remarks>
            The algorithm. Does not include line-based processing (Rules L1, L2).
            These are applied later in the line-based phase of the algorithm.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Typography.Bidi.BidiAlgorithm.DetermineMatchingIsolates" -->
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.DetermineParagraphEmbeddingLevel(System.Int32,System.Int32)">
            <summary>Determines the paragraph level based on rules P2, P3.</summary>
            <remarks>
            Determines the paragraph level based on rules P2, P3. This is also used
            in rule X5c to find if an FSI should resolve to LRI or RLI.
            </remarks>
            <param name="startIndex">the index of the beginning of the substring</param>
            <param name="endIndex">the index of the character after the end of the string</param>
            <returns>
            the resolved paragraph direction of the substring limited by
            startIndex and endIndex
            </returns>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.DetermineExplicitEmbeddingLevels">
            <summary>Determine explicit levels using rules X1 - X8</summary>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.IsolatingRunSequence.#ctor(iText.Typography.Bidi.BidiAlgorithm,System.Int32[])">
            <summary>
            Rule X10, second bullet: Determine the start-of-sequence (sos) and end-of-sequence (eos) types,
            either L or R, for each isolating run sequence.
            </summary>
            <param name="inputIndexes"/>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.IsolatingRunSequence.ResolvePairedBrackets">
            <summary>Resolving bidi paired brackets  Rule N0</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Typography.Bidi.BidiAlgorithm.IsolatingRunSequence.ResolveWeakTypes" -->
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.IsolatingRunSequence.ResolveNeutralTypes">
            <summary>6) resolving neutral types Rules N1-N2.</summary>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.IsolatingRunSequence.ResolveImplicitLevels">
            <summary>7) resolving implicit embedding levels Rules I1, I2.</summary>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.IsolatingRunSequence.FindRunLimit(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Return the limit of the run consisting only of the types in validSet
            starting at index.
            </summary>
            <remarks>
            Return the limit of the run consisting only of the types in validSet
            starting at index. This checks the value at index, and will return
            index if that value is not in validSet.
            </remarks>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.IsolatingRunSequence.SetTypes(System.Int32,System.Int32,System.Byte)">
            <summary>Set types from start up to (but not including) limit to newType.</summary>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.IsolatingRunSequence.AssertOnly(System.Byte[])">
            <summary>Algorithm validation.</summary>
            <remarks>
            Algorithm validation. Assert that all values in types are in the
            provided set.
            </remarks>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.DetermineLevelRuns">
            <summary>Determines the level runs.</summary>
            <remarks>
            Determines the level runs. Rule X9 will be applied in determining the
            runs, in the way that makes sure the characters that are supposed to be
            removed are not included in the runs.
            </remarks>
            <returns>
            an array of level runs. Each level run is described as an array
            of indexes into the input string.
            </returns>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.DetermineIsolatingRunSequences">
            <summary>Definition BD13.</summary>
            <remarks>Definition BD13. Determine isolating run sequences.</remarks>
            <returns>an array of isolating run sequences.</returns>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.AssignLevelsToCharactersRemovedByX9">
            <summary>Assign level information to characters removed by rule X9.</summary>
            <remarks>
            Assign level information to characters removed by rule X9. This is for
            ease of relating the level information to the original input data. Note
            that the levels assigned to these codes are arbitrary, they're chosen so
            as to avoid breaking level runs.
            </remarks>
            <returns>
            the length of the data (original length of types array supplied
            to constructor)
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Typography.Bidi.BidiAlgorithm.GetLevels(System.Int32[])" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Typography.Bidi.BidiAlgorithm.GetReordering(System.Int32[])" -->
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.ComputeMultilineReordering(System.Byte[],System.Int32[])">
            <summary>Return multiline reordering array for a given level array.</summary>
            <remarks>
            Return multiline reordering array for a given level array. Reordering
            does not occur across a line break.
            </remarks>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.ComputeReordering(System.Byte[])">
            <summary>Return reordering array for a given level array.</summary>
            <remarks>
            Return reordering array for a given level array. This reorders a single
            line. The reordering is a visual to logical map. For example, the
            leftmost char is string.charAt(order[0]). Rule L2.
            </remarks>
            <param name="levels">a given level array</param>
            <returns>reordering array</returns>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.GetBaseLevel">
            <summary>Return the base level of the paragraph.</summary>
            <returns>the base level of the paragraph</returns>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.IsWhitespace(System.Byte)">
            <summary>
            Return true if the type is considered a whitespace type for the line
            break rules.
            </summary>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.IsRemovedByX9(System.Byte)">
            <summary>Return true if the type is one of the types removed in X9.</summary>
            <remarks>
            Return true if the type is one of the types removed in X9.
            Made public so callers can duplicate the effect.
            </remarks>
            <param name="biditype">biditype</param>
            <returns>true if the type is one of the types removed in X9</returns>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.TypeForLevel(System.Int32)">
            <summary>Return the strong type (L or R) corresponding to the level.</summary>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.SetLevels(System.Byte[],System.Int32,System.Int32,System.Byte)">
            <summary>Set levels from start up to (but not including) limit to newLevel.</summary>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.ValidateTypes(System.Byte[])">
            <summary>Throw exception if type array is invalid.</summary>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.ValidateParagraphEmbeddingLevel(System.Byte)">
            <summary>Throw exception if paragraph embedding level is invalid.</summary>
            <remarks>
            Throw exception if paragraph embedding level is invalid. Special
            allowance for implicitEmbeddinglevel so that default processing of the
            paragraph embedding level as implicit can still be performed when
            using this API.
            </remarks>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.ValidateLineBreaks(System.Int32[],System.Int32)">
            <summary>Throw exception if line breaks array is invalid.</summary>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.ValidatePbTypes(System.Byte[])">
            <summary>Throw exception if pairTypes array is invalid</summary>
        </member>
        <member name="M:iText.Typography.Bidi.BidiAlgorithm.ValidatePbValues(System.Int32[],System.Byte[])">
            <summary>
            Throw exception if pairValues array is invalid or doesn't match pairTypes in length
            Unfortunately there's little we can do in terms of validating the values themselves
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Typography.Bidi.BidiAlgorithm.AnalyzeInput(System.Byte[],System.Byte[],System.Int32[],System.Byte)" -->
        <member name="M:iText.Typography.Bidi.BidiPBAAlgorithm.MatchOpener(System.Int32[],System.Int32,System.Int32)">
            <summary>
            check whether characters at putative positions could form a bracket pair
            based on the paired bracket character properties
            </summary>
            <param name="pairValues">
            - unique ID for the pair (or set) of canonically matched
            brackets
            </param>
            <param name="ichOpener">- position of the opening bracket</param>
            <param name="ichCloser">- position of the closing bracket</param>
            <returns>true if match</returns>
        </member>
        <member name="M:iText.Typography.Bidi.BidiPBAAlgorithm.RemoveHead(System.Collections.Generic.LinkedList{System.Int32},System.Int32)">
            <summary>removes any list elements from First to index</summary>
            <param name="list"/>
            <param name="index"/>
        </member>
        <member name="M:iText.Typography.Bidi.BidiPBAAlgorithm.LocateBrackets(System.Byte[],System.Int32[])">
            <summary>
            locate all Paired Bracket characters and determine whether they form
            pairs according to BD16.
            </summary>
            <remarks>
            locate all Paired Bracket characters and determine whether they form
            pairs according to BD16. This implementation uses a linked list instead
            of a stack, because, while elements are added at the front (like a push)
            there are not generally removed in atomic 'pop' operations, reducing the
            benefit of the stack archetype.
            </remarks>
            <param name="pairTypes">- array of paired Bracket types</param>
            <param name="pairValues">
            - array of characters codes such that for all bracket
            characters it contains the same unique value if their
            Bidi_Paired_Bracket properties map between them. For
            brackets hat have canonical decompositions (singleton
            mappings) it contains the same value as for the canonically
            decomposed character. For characters that have paired
            bracket type of "n" the value is ignored.
            </param>
        </member>
        <member name="M:iText.Typography.Bidi.BidiPBAAlgorithm.GetStrongTypeN0(System.Int32)">
            <summary>map character's directional code to strong type as required by rule N0</summary>
            <param name="ich">- index into array of directional codes</param>
            <returns>R or L for strong directional codes, ON for anything else</returns>
        </member>
        <member name="M:iText.Typography.Bidi.BidiPBAAlgorithm.ClassifyPairContent(iText.Typography.Bidi.BidiPBAAlgorithm.BracketPair,System.Byte)">
            <summary>determine which strong types are contained inside a Bracket Pair</summary>
            <param name="pairedLocation">- a bracket pair</param>
            <param name="dirEmbed">- the embedding direction</param>
            <returns>
            ON if no strong type found, otherwise return the embedding
            direction, unless the only strong type found is opposite the
            embedding direction, in which case that is returned
            </returns>
        </member>
        <member name="M:iText.Typography.Bidi.BidiPBAAlgorithm.ClassBeforePair(iText.Typography.Bidi.BidiPBAAlgorithm.BracketPair)">
            <summary>determine which strong types are present before a Bracket Pair</summary>
            <param name="pairedLocation">- a bracket pair</param>
            <returns>R or L if strong type found, otherwise ON</returns>
        </member>
        <member name="M:iText.Typography.Bidi.BidiPBAAlgorithm.AssignBracketType(iText.Typography.Bidi.BidiPBAAlgorithm.BracketPair,System.Byte)">
            <summary>Implement rule N0 for a single bracket pair</summary>
            <param name="pairedLocation">- a bracket pair</param>
            <param name="dirEmbed">- the embedding direction</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Typography.Bidi.BidiPBAAlgorithm.ResolvePairedBrackets(System.Int32[],System.Byte[],System.Byte[],System.Int32[],System.Byte,System.Byte)" -->
        <member name="M:iText.Typography.Bidi.BidiPBAAlgorithm.RunAlgorithm(System.Byte[],System.Byte[],System.Int32[],System.Byte,System.Byte)">
            <summary>Entry point for testing the BPA algorithm in isolation.</summary>
            <remarks>
            Entry point for testing the BPA algorithm in isolation. Does not use an indexes
            array for indirection. Actual work is carried out by resolvePairedBrackets.
            </remarks>
            <param name="codes">- bidi classes (directional codes) for each character</param>
            <param name="pairTypes">- array of paired bracket type values for each character</param>
            <param name="pairValues">
            - array of unique integers identifying which bracket pair
            see resolvePairedBrackets for details.
            </param>
            <param name="sos">- direction for sos</param>
            <param name="level">- the embedding level</param>
        </member>
        <member name="M:iText.Typography.Shaping.Shaper.ApplyKerning(iText.IO.Font.FontProgram,iText.IO.Font.Otf.GlyphLine)">
            <summary>
            Applies kerning to this
            <see cref="T:iText.IO.Font.Otf.GlyphLine"/>
            using advance glyph transformations
            </summary>
            <param name="fontProgram">fontProgram</param>
            <param name="text">
            the
            <see cref="T:iText.IO.Font.Otf.GlyphLine"/>
            to be kerned
            </param>
            <returns>
            
            <see langword="true"/>
            , if any kern positioning applied
            </returns>
        </member>
        <member name="T:iText.Typography.Util.CalligraphProductInfo">
            <author>Michael Demey</author>
        </member>
    </members>
</doc>
